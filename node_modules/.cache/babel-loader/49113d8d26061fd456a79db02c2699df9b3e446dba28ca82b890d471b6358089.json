{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\Mojesh\\\\jobapplication\\\\src\\\\pages\\\\Apply.js\",\n  _s = $RefreshSig$();\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Apply() {\n  _s();\n  const {\n    jobId\n  } = useParams();\n  const navigate = useNavigate();\n  const [resumeLink, setResumeLink] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [job, setJob] = useState(null);\n  useEffect(() => {\n    fetch(`http://localhost:5000/api/jobs/${jobId}`).then(res => res.json()).then(data => setJob(data));\n  }, [jobId]);\n  const handleSubmit = async () => {\n    const token = localStorage.getItem(\"token\");\n    const userId = localStorage.getItem(\"userId\");\n    if (!token || !userId) {\n      alert(\"You must log in first!\");\n      return navigate(\"/login\");\n    }\n    const res = await fetch(\"http://localhost:5000/api/applications\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        jobId,\n        userId,\n        resumeLink,\n        note\n      })\n    });\n    if (res.ok) {\n      alert(\"Application submitted!\");\n      navigate(\"/my-applications\");\n    } else {\n      alert(\"Failed to apply\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Apply for \", job === null || job === void 0 ? void 0 : job.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        placeholder: \"Resume Link\",\n        value: resumeLink,\n        onChange: e => setResumeLink(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"input\",\n        placeholder: \"Note\",\n        value: note,\n        onChange: e => setNote(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleSubmit,\n        children: \"Submit Application\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(Apply, \"NNQ+4q9QUUHtFDDHuAZPm7X/Fi8=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Apply;\nvar _c;\n$RefreshReg$(_c, \"Apply\");","map":{"version":3,"names":["useParams","useNavigate","useState","useEffect","jsxDEV","_jsxDEV","Apply","_s","jobId","navigate","resumeLink","setResumeLink","note","setNote","job","setJob","fetch","then","res","json","data","handleSubmit","token","localStorage","getItem","userId","alert","method","headers","Authorization","body","JSON","stringify","ok","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/asus/Desktop/Mojesh/jobapplication/src/pages/Apply.js"],"sourcesContent":["import { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default function Apply() {\r\n  const { jobId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [resumeLink, setResumeLink] = useState(\"\");\r\n  const [note, setNote] = useState(\"\");\r\n  const [job, setJob] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(`http://localhost:5000/api/jobs/${jobId}`)\r\n      .then((res) => res.json())\r\n      .then((data) => setJob(data));\r\n  }, [jobId]);\r\n\r\n  const handleSubmit = async () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    if (!token || !userId) {\r\n      alert(\"You must log in first!\");\r\n      return navigate(\"/login\");\r\n    }\r\n\r\n    const res = await fetch(\"http://localhost:5000/api/applications\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({ jobId, userId, resumeLink, note }),\r\n    });\r\n\r\n    if (res.ok) {\r\n      alert(\"Application submitted!\");\r\n      navigate(\"/my-applications\");\r\n    } else {\r\n      alert(\"Failed to apply\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Apply for {job?.title}</h2>\r\n      <div className=\"space-y\">\r\n        <input\r\n          className=\"input\"\r\n          placeholder=\"Resume Link\"\r\n          value={resumeLink}\r\n          onChange={(e) => setResumeLink(e.target.value)}\r\n        />\r\n        <textarea\r\n          className=\"input\"\r\n          placeholder=\"Note\"\r\n          value={note}\r\n          onChange={(e) => setNote(e.target.value)}\r\n        />\r\n        <button className=\"btn\" onClick={handleSubmit}>\r\n          Submit Application\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}